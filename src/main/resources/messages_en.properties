# ActivityCommandService
activity.exists.title=Activity with title {0} already exists.
activity.not.found.by.id=Activity with ID {0} not found.
activity.query.unsupported.all=Query operations should be handled by ActivityQueryService.
activity.query.unsupported.byId=Query operations should be handled by ActivityQueryService.
notification.activity.creation.error=Error creating new-activity notification for organization {0}: {1}

# InscriptionCommandService
volunteer.not.found.by.id=Volunteer with ID {0} does not exist.
inscription.activity.not.found=Activity with ID {0} does not exist.
volunteer.already.enrolled=Volunteer {0} is already enrolled in activity {1}.
inscription.slots.full=No available slots for activity with ID {0}.
notification.inscription.volunteer.error=Error creating joined-activity notification for volunteer {0}: {1}
notification.inscription.organization.error=Error creating volunteer-joined notification for organization {0}: {1}
inscription.not.found.by.id=Enrollment with ID {0} not found.
inscription.activity.association.not.found=Associated activity not found for inscription ID {0}.
inscription.query.unsupported.all=Query operations should be handled by InscriptionQueryService.
inscription.query.unsupported.byId=Query operations should be handled by InscriptionQueryService.
inscription.query.unsupported.byActivityId=Query operations should be handled by InscriptionQueryService.

# ActivityQueryService
activity.command.unsupported.create=Command operations should be handled by ActivityCommandService.
activity.command.unsupported.update=Command operations should be handled by ActivityCommandService.
activity.command.unsupported.delete=Command operations should be handled by ActivityCommandService.

# InscriptionQueryService
inscription.command.unsupported.create=Command operations should be handled by InscriptionCommandService.
inscription.command.unsupported.update=Command operations should be handled by InscriptionCommandService.
inscription.command.unsupported.delete=Command operations should be handled by InscriptionCommandService.

auth.usernameTaken=Username is already taken!
auth.emailTaken=Email is already in use!
auth.orgCreationFailed=Failed to create organization: {0}
auth.orgCreationUnexpected=Failed to create organization due to an unexpected error: {0}
auth.invalidCredentials=Invalid username or password!
auth.orgCreationFailedState=Organization could not be created for user: {0}
auth.orgCreationSuccessLog=Organization created successfully for user: {0} with ID: {1}
auth.orgCreationErrorLog=Error creating organization for user {0}: {1}
auth.orgCreationUnexpectedLog=Unexpected error during organization creation for user {0}: {1}

auth.userNotFound=User not found with username: {0}

notification.notFound=Notification with ID {0} not found.

notification.signup.title=Welcome to VolunTrack!
notification.signup.message=Your account has been successfully created. You can now join activities.

notification.login.title=Session started
notification.login.message=You have successfully logged in.

notification.new_activity.title=Activity created
notification.new_activity.message=You have created a new volunteer activity. Share to add volunteers!

notification.joined_activity.title=Registration confirmed
notification.joined_activity.message=You have signed up for a new activity. Thank you for your commitment!

notification.volunteer_joined.title=New volunteer
notification.volunteer_joined.message=A volunteer has joined one of your activities. Review the details.

notification.certificate_ready.title=Certificate available
notification.certificate_ready.message=Your participation certificate is now available for download.

notification.reminder.title=Activity reminder
notification.reminder.message=You have an activity scheduled soon. Don't forget to review the details.

notification.generic.title=Notification
notification.generic.message=You have a new notification in VolunTrack.

certificate.notificationErrorLog=Error creating certificate-ready notification for participation {0}: {1}

certificate.exists=Error: A certificate already exists for participation ID {0}
participation.duplicate=Error: Volunteer {0} is already registered for Activity {1}

organization.exists.name=An organization with the name {0} already exists.
organization.exists.email=An organization with the email {0} already exists.
organization.query.unsupported=Query operations should be handled by OrganizationQueryService.

volunteer.signup.notification.error=Error creating signup notification for volunteer {0}: {1}

organization.command.unsupported.create=Create operations should be handled by OrganizationCommandService.
organization.command.unsupported.update=Update operations should be handled by OrganizationCommandService.
organization.command.unsupported.delete=Delete operations should be handled by OrganizationCommandService.
organization.query.unsupported.multiple=Querying multiple organizations with a list of GetOrganizationQuery is not supported by this service.

volunteer.exists.dni=Error: Volunteer with DNI {0} already exists.
volunteer.exists.email=Error: Volunteer with email {0} already exists.
organization.not.found=Error: Organization with ID {0} not found.
volunteer.organization.association.failed=Error: Failed to associate volunteer with organization after creation, or association already exists.
volunteer.update.dni.exists=Error: Cannot update DNI to {0} as it already exists for another volunteer.
volunteer.update.email.exists=Error: Cannot update email to {0} as it already exists for another volunteer.
volunteer.association.missing=Error: Volunteer or Organization not found for association.
volunteer.association.exists=Error: Association between Volunteer {0} and Organization {1} already exists.
volunteer.dissociation.missing=Error: Volunteer or Organization not found for dissociation.
volunteer.dissociation.notFound=Error: Association between Volunteer {0} and Organization {1} does not exist.
