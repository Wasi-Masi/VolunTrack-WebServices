# ActivityCommandService
activity.exists.title=Activity with title {0} already exists.
activity.not.found.by.id=Activity with ID {0} not found.
activity.query.unsupported.all=Query operations should be handled by ActivityQueryService.
activity.query.unsupported.byId=Query operations should be handled by ActivityQueryService.
notification.activity.creation.error=Error creating new-activity notification for organization {0}: {1}

# InscriptionCommandService
volunteer.not.found.by.id=Volunteer with ID {0} does not exist.
inscription.activity.not.found=Activity with ID {0} does not exist.
volunteer.already.enrolled=Volunteer {0} is already enrolled in activity {1}.
inscription.slots.full=No available slots for activity with ID {0}.
notification.inscription.volunteer.error=Error creating joined-activity notification for volunteer {0}: {1}
notification.inscription.organization.error=Error creating volunteer-joined notification for organization {0}: {1}
inscription.not.found.by.id=Enrollment with ID {0} not found.
inscription.activity.association.not.found=Associated activity not found for inscription ID {0}.
inscription.query.unsupported.all=Query operations should be handled by InscriptionQueryService.
inscription.query.unsupported.byId=Query operations should be handled by InscriptionQueryService.
inscription.query.unsupported.byActivityId=Query operations should be handled by InscriptionQueryService.

# ActivityQueryService
activity.command.unsupported.create=Command operations should be handled by ActivityCommandService.
activity.command.unsupported.update=Command operations should be handled by ActivityCommandService.
activity.command.unsupported.delete=Command operations should be handled by ActivityCommandService.

# InscriptionQueryService
inscription.command.unsupported.create=Command operations should be handled by InscriptionCommandService.
inscription.command.unsupported.update=Command operations should be handled by InscriptionCommandService.
inscription.command.unsupported.delete=Command operations should be handled by InscriptionCommandService.
