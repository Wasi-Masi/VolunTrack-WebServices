package com.VolunTrack.demo.VolunteerRegistration.Domain.Model.Aggregates;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents a Volunteer aggregate in the Volunteer Registration bounded context.
 * A volunteer is a root entity that can be associated with multiple organizations.
 */
@Entity
@Table(name = "volunteers")
@Getter
@Setter
@NoArgsConstructor
public class Volunteer {

    /**
     * The unique identifier for the volunteer.
     * This field is the primary key and is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The first name of the volunteer.
     * This field is required and has a maximum length of 100 characters.
     */
    @Column(name = "first_name", nullable = false, length = 100)
    private String firstName;

    /**
     * The last name of the volunteer.
     * This field is required and has a maximum length of 100 characters.
     */
    @Column(name = "last_name", nullable = false, length = 100)
    private String lastName;

    /**
     * The DNI (National Identity Document) of the volunteer.
     * This field must be unique, is required, and has a maximum length of 20 characters.
     */
    @Column(name = "dni", unique = true, nullable = false, length = 20)
    private String dni;

    /**
     * The date of birth of the volunteer.
     * This field is required.
     */
    @Column(name = "date_of_birth", nullable = false)
    private LocalDate dateOfBirth;

    /**
     * The contact email address of the volunteer.
     * This field must be unique, is required, and has a maximum length of 150 characters.
     */
    @Column(name = "email", unique = true, nullable = false, length = 150)
    private String email;

    /**
     * The phone number of the volunteer.
     * This field is required and has a maximum length of 20 characters.
     */
    @Column(name = "phone_number", nullable = false, length = 20)
    private String phoneNumber;

    /**
     * The address of the volunteer.
     * This field has a maximum length of 200 characters and is optional.
     */
    @Column(name = "address", length = 200)
    private String address;

    /**
     * The date when the volunteer was registered in the system.
     * This field is typically set automatically upon creation.
     */
    @Column(name = "registration_date", nullable = false)
    private LocalDate registrationDate;

    /**
     * The current status of the volunteer (e.g., ACTIVE, INACTIVE).
     * Stored as a String in the database.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    private VolunteerStatus status;

    /**
     * The profession of the volunteer.
     * This field has a maximum length of 100 characters and is optional.
     */
    @Column(name = "profession", length = 100)
    private String profession;

    // --- NUEVO CAMPO: organizationId ---
    @Column(name = "organization_id", nullable = false)
    private Long organizationId;
    // --- FIN NUEVO CAMPO ---

    /**
     * The set of {@link OrgVolunteer} entities representing the many-to-many relationship
     * between this Volunteer and its associated Organizations.
     * Operations like persist and remove will cascade to the associated OrgVolunteer entities.
     * If an OrgVolunteer is removed from this set, it will be removed from the database (orphan removal).
     */
    @OneToMany(mappedBy = "volunteer", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<OrgVolunteer> orgVolunteers = new HashSet<>();

    /**
     * Custom constructor for creating a new Volunteer instance without an ID,
     * as the ID is generated by the database.
     * This constructor also sets default values for registrationDate and status.
     *
     * @param firstName The first name of the volunteer.
     * @param lastName The last name of the volunteer.
     * @param dni The DNI of the volunteer.
     * @param dateOfBirth The date of birth of the volunteer.
     * @param email The email address of the volunteer.
     * @param phoneNumber The phone number of the volunteer.
     * @param address The address of the volunteer.
     * @param organizationId The ID of the organization this volunteer belongs to.
     */
    public Volunteer(String firstName, String lastName, String dni, LocalDate dateOfBirth, String email, String phoneNumber, String address, Long organizationId) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.dni = dni;
        this.dateOfBirth = dateOfBirth;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.registrationDate = LocalDate.now();
        this.status = VolunteerStatus.ACTIVE;
        this.profession = null; // Default to null, can be set by a more specific constructor
        this.organizationId = organizationId; // Set the organizationId
    }

    /**
     * Custom constructor for creating a new Volunteer instance with all initial business fields,
     * including profession.
     *
     * @param firstName The first name of the volunteer.
     * @param lastName The last name of the volunteer.
     * @param dni The DNI of the volunteer.
     * @param dateOfBirth The date of birth of the volunteer.
     * @param email The email address of the volunteer.
     * @param phoneNumber The phone number of the volunteer.
     * @param address The address of the volunteer.
     * @param profession The profession of the volunteer.
     * @param organizationId The ID of the organization this volunteer belongs to.
     */
    public Volunteer(String firstName, String lastName, String dni, LocalDate dateOfBirth, String email,
                     String phoneNumber, String address, String profession, Long organizationId) {
        // Llama al constructor base y luego establece la profesi√≥n y organizationId
        this(firstName, lastName, dni, dateOfBirth, email, phoneNumber, address, organizationId);
        this.profession = profession;
    }


    /**
     * Adds an {@link OrgVolunteer} association to this volunteer.
     * This method ensures the bidirectional consistency of the relationship.
     *
     * @param orgVolunteer The OrgVolunteer instance to add.
     */
    public void addOrgVolunteer(OrgVolunteer orgVolunteer) {
        this.orgVolunteers.add(orgVolunteer);
        orgVolunteer.setVolunteer(this);
    }

    /**
     * Removes an {@link OrgVolunteer} association from this volunteer.
     * This method ensures the bidirectional consistency of the relationship
     * and desvinculates the OrgVolunteer.
     *
     * @param orgVolunteer The OrgVolunteer instance to remove.
     */
    public void removeOrgVolunteer(OrgVolunteer orgVolunteer) {
        this.orgVolunteers.remove(orgVolunteer);
        orgVolunteer.setVolunteer(null);
    }
}