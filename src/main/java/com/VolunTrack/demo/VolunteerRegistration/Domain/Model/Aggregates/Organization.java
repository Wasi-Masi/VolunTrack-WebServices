package com.VolunTrack.demo.VolunteerRegistration.Domain.Model.Aggregates;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

/**
 * Represents an Organization aggregate in the Volunteer Registration bounded context.
 * An organization is a root entity that can manage volunteers.
 */
@Entity
@Table(name = "organizations")
@Getter
@Setter
@NoArgsConstructor
public class Organization {

    /**
     * The unique identifier for the organization.
     * This field is the primary key and is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the organization.
     * This field is required and has a maximum length of 100 characters.
     */
    @Column(name = "name", nullable = false, length = 100)
    private String name;

    /**
     * A brief description of the organization.
     * This field has a maximum length of 500 characters and is optional.
     */
    @Column(name = "description", length = 500)
    private String description;

    /**
     * The email address of the organization.
     * This field must be unique, is required, and has a maximum length of 150 characters.
     */
    @Column(name = "email", unique = true, nullable = false, length = 150)
    private String email;

    /**
     * The current plan of the organization (e.g., "Basic", "Premium").
     * This field has a maximum length of 50 characters.
     */
    @Column(name = "plan", length = 50)
    private String plan;

    /**
     * The set of {@link OrgVolunteer} entities representing the many-to-many relationship
     * between this Organization and its associated Volunteers.
     * Operations like persist and remove will cascade to the associated OrgVolunteer entities.
     * If an OrgVolunteer is removed from this set, it will be removed from the database (orphan removal).
     */
    @OneToMany(mappedBy = "organization", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<OrgVolunteer> orgVolunteers = new HashSet<>();

    /**
     * Custom constructor for creating a new Organization instance without an ID,
     * as the ID is generated by the database.
     *
     * @param name The name of the organization.
     * @param description A brief description of the organization.
     * @param email The email address of the organization.
     * @param plan The current plan of the organization.
     */
    public Organization(String name, String description, String email, String plan) {
        this.name = name;
        this.description = description;
        this.email = email;
        this.plan = plan;
    }

    /**
     * Adds an {@link OrgVolunteer} association to this organization.
     * This method ensures the bidirectional consistency of the relationship.
     *
     * @param orgVolunteer The OrgVolunteer instance to add.
     */
    public void addOrgVolunteer(OrgVolunteer orgVolunteer) {
        this.orgVolunteers.add(orgVolunteer);
        orgVolunteer.setOrganization(this);
    }

    /**
     * Removes an {@link OrgVolunteer} association from this organization.
     * This method ensures the bidirectional consistency of the relationship
     * and desvinculates the OrgVolunteer.
     *
     * @param orgVolunteer The OrgVolunteer instance to remove.
     */
    public void removeOrgVolunteer(OrgVolunteer orgVolunteer) {
        this.orgVolunteers.remove(orgVolunteer);
        orgVolunteer.setOrganization(null);
    }
}